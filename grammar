/**
 * Grammar for C Minor:
 */

// Program
// -------

compilation: enum_type* global_variable* class_type* function* main;

// Enumeration
// -----------

enum_type : 'def' Name type? 'type' '=' '{' enum_field (',' enum_field)* '}' ;

enum_field : Name ('=' constant)? ;

// Globals, constants, and variables
// ---------------------------------

global_variable : 'def' ('const' | 'global') variable_decl ;

variable_decl : variable_decl_list;

variable_decl_list : variable_decl_init (',' variable_decl_init)* type ;

variable_decl_init : Name ('=' (expression | 'uninit'))? ;

// Types
// -----

type : scalar_type | class_name | 'List' '[' type ']'

scalar_type
    : discrete_type
    | 'String' ('[' Int_literal ']')*
    | 'Real' ('[' Int_literal ']')*
    ;

discrete_type
    : 'Bool' ('[' Int_literal ']')*
    | 'Int' ('[' Int_literal ']')*
    | 'Char' ('[' Int_literal ']')*
    ;

class_name : Name ('<' type (',' type)* '>')? ;

// Class declaration
// -----------------

class_type : ('abstr' | 'final')? 'class' name type_params? super_class? class_body ;

type_params : '<' type (',' type)* '>' ;

super_class : 'inherits' name type_params? ;

class_body : '{' data_decl* method_decl* '}' ;

// Field declaration
// -----------------

data_decl : ('property' | 'protected' | 'public') variable_decl ;

// Method declaration
// ------------------

method_decl : method_class | operator_class ;

method_class : method_modifier attribute* 'override'? 'method' method_header '=>' return_type? block_statement ;

method_modifier : 'protected' | 'public' ;

attribute : 'final' | 'pure' | 'recurs' ;

method_header : Name '(' formal_params? ')' ;

formal_params : param_modifier Name type (',' param_modifier Name type)*

param_modifier : 'in' | 'out' | 'inout' | 'ref' ;

return_type : 'Void' | type ;

operator_class : operator_modifier 'final'? 'operator' operator_header '=>' return_type block_statement ;

operator_modifier : 'protected' | 'public' ;

operator_header : operator_symbol '(' formal_params? ')' ;

operator_symbol : binary_operator | unary_operator ;

binary_operator : '==' | '>' | '>=' | '<' | '<=' | '<>' | '<=>' | '+' | '-' | '*' | '/' | '%' | '**' ;

unary_operator : '~' | 'not' ;

// Function declaration
// --------------------

function : 'def' ('pure' | 'recurs')? function_header '=>' return_type block_statement ;

function_header : Name type_params? '(' formal_params? ')' ;

type_params : '<' typefier (',' typefier)* '>' ;

typefier : ('discr' | 'scalar' | 'class')? Name ;

// Main function
// -------------

main : 'def' 'main' args? '=>' block_statement ;

args : '(' formal_params? ')' ;

block_statement : '{' declaration* statement* '}' ;

declaration : 'def' 'local'? variable_decl ;

// Statements
// ----------

statement
    : 'stop'
    | return_statement
    | expression_statement      
    | block_statement
    | if_statement
    | while_statement
    | do_while_statement
    | choice_statement
    ;

return_statement : 'return' expression? ;

expression_statement
    : 'set' expression assignment_operator = expression
    |  logical_or_expression ;

assignment_operator : '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '**=' ;

if_statement : 'if' expression block_statement (elif_statement)* ('else' block_statement)? ;

elif_statement : 'else' 'if' expression block_statement ;

while_statement : 'while' expression ('next' expression)? block_statement ;

do_while_statement : 'do' block_statement ('next' expression)? 'while' expression ;

choice_statement : 'choice' expression '{' case_statement* 'other' block_statement '}'

case_statement : 'on' label block_statement ;

label : constant ('..' constant)?

input_statement : 'cin' ('>>' expression)+ ;

output_statement : 'cout' ('<<' expression)+ ;

// Expressions
// -----------

primary_expression
    : Identifier
    | Constant
    | '(' expression ')'
    | input_statement
    | output_statement
    ;

postfix_expression
    : primary_expression ('[' expression ']' | '(' arguments ')' | ('.' | '?.') expression)*
    ;

arguments : expression (',' expression)* ;

unary_expression
    : unary_operator cast_expression
    | postfix_expression
    ;

cast_expression
    : scalar_type '(' cast_expression ')'
    | unary_expression
    ;

power_expression
    : cast_expression ('**' cast_expression)*
    ;

multiplication_expression
    : power_expression (('*' | '/' | '%') power_expression)*
    ;

additive_expression
    : multiplication_expression (('+' | '-') multiplication_expression)*
    ;

shift_expression
    : additive_expression (('<<' | '>>') additive_expression)*
    ;

relational_expression
    : shift_expression (('<' | '>' | '<=' | '>=') shift_expression)*
    ;

instanceof_expression
    : relational_expression (('instanceof' | '!instanceof' | 'as?') relational_expression)*
    ;

equality_expression
    : instanceof_expression (('==' | '<>') instanceof_expression)*
    ;

and_expression
    : equality_expression ('&' equality_expression)*
    ;

exclusive_or_expression
    : and_expression ('^' and_expression)*
    ;

inclusive_or_expression
    : exclusive_or_expression ('|' exclusive_or_expression)*
    ;

logical_and_expression
    : inclusive_or_expression ('and' inclusive_or_expression)*
    ;

logical_or_expression
    : logical_and_expression ('or' logical_and_expression)*
    ;

 expression
    : logical_or_expression
    ;

// Literals
// --------

constants : object_constant | array_constant | list_constant | scalar_constant ;

object_constant : 'new' Name '(' object_field (',' object_field)* ')' ;

object_field : Name ':' expression ;

array_constant : 'Array' ('[' expression ']')* '(' arguments ')' ; // for 2d Array[2][2](Array(1, 2), Array(3, 4))

list_constant : 'List' '(' expression (',' expression)* ')'

scalar_constant : discrete_constant | String_literal | Real_literal ;

discrete_constant : Int_literal | Bool_literal ;

// REGEX
// -----

Name : Identifier_start Identifier_part* ;

Identifier_start : 'a'..'z' | 'A'..'Z' | '_' ;

Identifier_part : Identifier_start | '0'..'9' ;

Int_literal : ('0'..'9')+ ;

Real_literal : Int_literal+ '.' Int_literal* | '.' Int_literal+ ;

String_literal : '\'' .*? '\'' | '\'\'\'' .*? '\'\'\'' ;

Bool_literal : 'True' | 'False' ;
